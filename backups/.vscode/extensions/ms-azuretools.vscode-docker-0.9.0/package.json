{
	"name": "vscode-docker",
	"version": "0.9.0",
	"preview": true,
	"publisher": "ms-azuretools",
	"displayName": "Docker",
	"description": "Adds syntax highlighting, commands, hover tips, and linting for Dockerfile and docker-compose files.",
	"license": "SEE LICENSE IN LICENSE.md",
	"icon": "resources/docker.png",
	"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
	"extensionKind": "workspace",
	"galleryBanner": {
		"color": "#1289B9",
		"theme": "dark"
	},
	"categories": [
		"Programming Languages",
		"Linters",
		"Azure"
	],
	"keywords": [
		"docker",
		"compose",
		"container",
		"multi-root ready"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/microsoft/vscode-docker"
	},
	"homepage": "https://github.com/Microsoft/vscode-docker/blob/master/README.md",
	"activationEvents": [
		"onCommand:vscode-docker.api.configure",
		"onCommand:vscode-docker.compose.down",
		"onCommand:vscode-docker.compose.restart",
		"onCommand:vscode-docker.compose.up",
		"onCommand:vscode-docker.configure",
		"onCommand:vscode-docker.containers.attachShell",
		"onCommand:vscode-docker.containers.browse",
		"onCommand:vscode-docker.containers.configureExplorer",
		"onCommand:vscode-docker.containers.inspect",
		"onCommand:vscode-docker.containers.prune",
		"onCommand:vscode-docker.containers.refresh",
		"onCommand:vscode-docker.containers.remove",
		"onCommand:vscode-docker.containers.restart",
		"onCommand:vscode-docker.containers.select",
		"onCommand:vscode-docker.containers.start",
		"onCommand:vscode-docker.containers.stop",
		"onCommand:vscode-docker.containers.viewLogs",
		"onCommand:vscode-docker.debugging.initializeForDebugging",
		"onCommand:vscode-docker.images.build",
		"onCommand:vscode-docker.images.configureExplorer",
		"onCommand:vscode-docker.images.inspect",
		"onCommand:vscode-docker.images.prune",
		"onCommand:vscode-docker.images.push",
		"onCommand:vscode-docker.images.refresh",
		"onCommand:vscode-docker.images.remove",
		"onCommand:vscode-docker.images.run",
		"onCommand:vscode-docker.images.runAzureCli",
		"onCommand:vscode-docker.images.runInteractive",
		"onCommand:vscode-docker.images.tag",
		"onCommand:vscode-docker.networks.configureExplorer",
		"onCommand:vscode-docker.networks.create",
		"onCommand:vscode-docker.networks.inspect",
		"onCommand:vscode-docker.networks.prune",
		"onCommand:vscode-docker.networks.refresh",
		"onCommand:vscode-docker.networks.remove",
		"onCommand:vscode-docker.pruneSystem",
		"onCommand:vscode-docker.registries.azure.buildImage",
		"onCommand:vscode-docker.registries.azure.createRegistry",
		"onCommand:vscode-docker.registries.azure.deleteRegistry",
		"onCommand:vscode-docker.registries.azure.deleteRepository",
		"onCommand:vscode-docker.registries.azure.openInPortal",
		"onCommand:vscode-docker.registries.azure.runFileAsTask",
		"onCommand:vscode-docker.registries.azure.runTask",
		"onCommand:vscode-docker.registries.azure.untagImage",
		"onCommand:vscode-docker.registries.azure.viewProperties",
		"onCommand:vscode-docker.registries.azure.viewTaskLogs",
		"onCommand:vscode-docker.registries.connectRegistry",
		"onCommand:vscode-docker.registries.copyImageDigest",
		"onCommand:vscode-docker.registries.deleteImage",
		"onCommand:vscode-docker.registries.deployImageToAzure",
		"onCommand:vscode-docker.registries.disconnectRegistry",
		"onCommand:vscode-docker.registries.dockerHub.openInBrowser",
		"onCommand:vscode-docker.registries.logInToDockerCli",
		"onCommand:vscode-docker.registries.logOutOfDockerCli",
		"onCommand:vscode-docker.registries.pullImage",
		"onCommand:vscode-docker.registries.pullRepository",
		"onCommand:vscode-docker.registries.refresh",
		"onCommand:vscode-docker.registries.setAsDefault",
		"onCommand:vscode-docker.volumes.configureExplorer",
		"onCommand:vscode-docker.volumes.inspect",
		"onCommand:vscode-docker.volumes.prune",
		"onCommand:vscode-docker.volumes.refresh",
		"onCommand:vscode-docker.volumes.remove",
		"onCommand:workbench.action.tasks.runTask",
		"onDebugInitialConfigurations",
		"onDebugResolve:docker-coreclr",
		"onDebugResolve:docker",
		"onLanguage:dockerfile",
		"onLanguage:yaml",
		"onView:dockerContainers",
		"onView:dockerImages",
		"onView:dockerNetworks",
		"onView:dockerRegistries",
		"onView:dockerVolumes"
	],
	"main": "main",
	"contributes": {
		"menus": {
			"commandPalette": [
				{
					"command": "vscode-docker.api.configure",
					"when": "never"
				},
				{
					"command": "vscode-docker.containers.select",
					"when": "never"
				},
				{
					"command": "vscode-docker.registries.azure.selectSubscriptions",
					"when": "never"
				}
			],
			"editor/context": [
				{
					"when": "editorLangId == dockerfile && isAzureAccountInstalled",
					"command": "vscode-docker.registries.azure.buildImage",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /^(?:(?!^docker-compose\\.ya?ml$).)*\\.ya?ml$/i && isAzureAccountInstalled",
					"command": "vscode-docker.registries.azure.runFileAsTask",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.yml",
					"command": "vscode-docker.compose.down",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.yml",
					"command": "vscode-docker.compose.restart",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.yml",
					"command": "vscode-docker.compose.up",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.debug.yml",
					"command": "vscode-docker.compose.down",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.debug.yml",
					"command": "vscode-docker.compose.restart",
					"group": "docker"
				},
				{
					"when": "resourceFilename == docker-compose.debug.yml",
					"command": "vscode-docker.compose.up",
					"group": "docker"
				},
				{
					"when": "editorLangId == dockerfile",
					"command": "vscode-docker.images.build",
					"group": "docker"
				}
			],
			"explorer/context": [
				{
					"when": "resourceFilename =~ /(^|\\.)dockerfile$/i && isAzureAccountInstalled",
					"command": "vscode-docker.registries.azure.buildImage",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /^(?:(?!^docker-compose\\.ya?ml$).)*\\.ya?ml$/i && isAzureAccountInstalled",
					"command": "vscode-docker.registries.azure.runFileAsTask",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /docker-compose/i",
					"command": "vscode-docker.compose.down",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /docker-compose/i",
					"command": "vscode-docker.compose.restart",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /docker-compose/i",
					"command": "vscode-docker.compose.up",
					"group": "docker"
				},
				{
					"when": "resourceFilename =~ /dockerfile/i",
					"command": "vscode-docker.images.build",
					"group": "docker"
				}
			],
			"view/title": [
				{
					"command": "vscode-docker.containers.prune",
					"when": "view == dockerContainers",
					"group": "navigation@1"
				},
				{
					"command": "vscode-docker.containers.configureExplorer",
					"when": "view == dockerContainers",
					"group": "navigation@8"
				},
				{
					"command": "vscode-docker.networks.configureExplorer",
					"when": "view == dockerNetworks",
					"group": "navigation@8"
				},
				{
					"command": "vscode-docker.containers.refresh",
					"when": "view == dockerContainers",
					"group": "navigation@9"
				},
				{
					"command": "vscode-docker.networks.create",
					"when": "view == dockerNetworks",
					"group": "navigation@1"
				},
				{
					"command": "vscode-docker.networks.prune",
					"when": "view == dockerNetworks",
					"group": "navigation@2"
				},
				{
					"command": "vscode-docker.networks.refresh",
					"when": "view == dockerNetworks",
					"group": "navigation@9"
				},
				{
					"command": "vscode-docker.images.prune",
					"when": "view == dockerImages",
					"group": "navigation@2"
				},
				{
					"command": "vscode-docker.images.configureExplorer",
					"when": "view == dockerImages",
					"group": "navigation@8"
				},
				{
					"command": "vscode-docker.images.refresh",
					"when": "view == dockerImages",
					"group": "navigation@9"
				},
				{
					"command": "vscode-docker.registries.refresh",
					"when": "view == dockerRegistries",
					"group": "navigation@9"
				},
				{
					"command": "vscode-docker.registries.connectRegistry",
					"when": "view == dockerRegistries",
					"group": "navigation@1"
				},
				{
					"command": "vscode-docker.volumes.prune",
					"when": "view == dockerVolumes",
					"group": "navigation@1"
				},
				{
					"command": "vscode-docker.volumes.configureExplorer",
					"when": "view == dockerVolumes",
					"group": "navigation@8"
				},
				{
					"command": "vscode-docker.volumes.refresh",
					"when": "view == dockerVolumes",
					"group": "navigation@9"
				}
			],
			"view/item/context": [
				{
					"command": "vscode-docker.containers.viewLogs",
					"when": "view == dockerContainers && viewItem =~ /container$/i",
					"group": "containers_1_general@1"
				},
				{
					"command": "vscode-docker.containers.attachShell",
					"when": "view == dockerContainers && viewItem =~ /^runningContainer$/i",
					"group": "containers_1_general@2"
				},
				{
					"command": "vscode-docker.containers.inspect",
					"when": "view == dockerContainers && viewItem =~ /container$/i",
					"group": "containers_1_general@3"
				},
				{
					"command": "vscode-docker.containers.browse",
					"when": "view == dockerContainers && viewItem =~ /runningContainer$/i",
					"group": "containers_1_general@4"
				},
				{
					"command": "vscode-docker.containers.start",
					"when": "view == dockerContainers && viewItem =~ /^(created|dead|exited|paused)Container$/i",
					"group": "containers_1_general@5"
				},
				{
					"command": "vscode-docker.containers.stop",
					"when": "view == dockerContainers && viewItem =~ /^(paused|restarting|running)Container$/i",
					"group": "containers_1_general@6"
				},
				{
					"command": "vscode-docker.containers.restart",
					"when": "view == dockerContainers && viewItem =~ /^runningContainer$/i",
					"group": "containers_1_general@7"
				},
				{
					"command": "vscode-docker.containers.remove",
					"when": "view == dockerContainers && viewItem =~ /container$/i",
					"group": "containers_2_destructive@1"
				},
				{
					"command": "vscode-docker.images.run",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_1_run@1"
				},
				{
					"command": "vscode-docker.images.runInteractive",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_1_run@2"
				},
				{
					"command": "vscode-docker.images.inspect",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_2_general@1"
				},
				{
					"command": "vscode-docker.images.push",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_2_general@2"
				},
				{
					"command": "vscode-docker.images.tag",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_2_general@3"
				},
				{
					"command": "vscode-docker.images.remove",
					"when": "view == dockerImages && viewItem == image",
					"group": "images_3_destructive@1"
				},
				{
					"command": "vscode-docker.registries.azure.selectSubscriptions",
					"when": "view == dockerRegistries && viewItem == azureextensionui.azureSubscription",
					"group": "inline"
				},
				{
					"command": "vscode-docker.registries.azure.viewTaskLogs",
					"when": "view == dockerRegistries && viewItem == azureTaskRun",
					"group": "inline"
				},
				{
					"command": "vscode-docker.networks.inspect",
					"when": "view == dockerNetworks && viewItem == network",
					"group": "networks_1_general@1"
				},
				{
					"command": "vscode-docker.networks.remove",
					"when": "view == dockerNetworks && viewItem == network",
					"group": "networks_2_destructive@1"
				},
				{
					"command": "vscode-docker.registries.azure.createRegistry",
					"when": "view == dockerRegistries && viewItem == azureextensionui.azureSubscription",
					"group": "regs_1_general@1"
				},
				{
					"command": "vscode-docker.registries.setAsDefault",
					"when": "view == dockerRegistries && viewItem =~ /Registry;/",
					"group": "regs_reg_1_general@1"
				},
				{
					"command": "vscode-docker.registries.azure.deleteRegistry",
					"when": "view == dockerRegistries && viewItem == azure;DockerV2;Registry;",
					"group": "regs_reg_2_destructive@1"
				},
				{
					"command": "vscode-docker.registries.pullRepository",
					"when": "view == dockerRegistries && viewItem =~ /Repository;/",
					"group": "regs_repo_1_general@1"
				},
				{
					"command": "vscode-docker.registries.azure.deleteRepository",
					"when": "view == dockerRegistries && viewItem == azure;DockerV2;Repository;",
					"group": "regs_repo_2_destructive@1"
				},
				{
					"command": "vscode-docker.registries.pullImage",
					"when": "view == dockerRegistries && viewItem =~ /Tag;/",
					"group": "regs_tag_1_general@1"
				},
				{
					"command": "vscode-docker.registries.copyImageDigest",
					"when": "view == dockerRegistries && viewItem =~ /DockerV2;Tag;/",
					"group": "regs_tag_1_general@2"
				},
				{
					"command": "vscode-docker.registries.deployImageToAzure",
					"when": "view == dockerRegistries && viewItem =~ /(DockerV2|DockerHubV2);Tag;/ && isAzureAccountInstalled",
					"group": "regs_tag_1_general@3"
				},
				{
					"command": "vscode-docker.registries.azure.untagImage",
					"when": "view == dockerRegistries && viewItem == azure;DockerV2;Tag;",
					"group": "regs_tag_2_destructive@1"
				},
				{
					"command": "vscode-docker.registries.deleteImage",
					"when": "view == dockerRegistries && viewItem =~ /DockerV2;Tag;/",
					"group": "regs_tag_2_destructive@2"
				},
				{
					"command": "vscode-docker.registries.azure.runTask",
					"when": "view == dockerRegistries && viewItem == azureTask",
					"group": "regs_task_1_general@1"
				},
				{
					"command": "vscode-docker.registries.copyImageDigest",
					"when": "view == dockerRegistries && viewItem == azureTaskRun",
					"group": "regs_taskRun_1_general@1"
				},
				{
					"command": "vscode-docker.registries.azure.viewTaskLogs",
					"when": "view == dockerRegistries && viewItem == azureTaskRun",
					"group": "regs_taskRun_1_general@2"
				},
				{
					"command": "vscode-docker.registries.disconnectRegistry",
					"when": "view == dockerRegistries && viewItem =~ /RegistryProvider;/",
					"group": "regs_yyy_destructive@1"
				},
				{
					"command": "vscode-docker.registries.disconnectRegistry",
					"when": "view == dockerRegistries && viewItem == invalidRegistryProvider",
					"group": "regs_yyy_destructive@1"
				},
				{
					"command": "vscode-docker.registries.azure.openInPortal",
					"when": "view == dockerRegistries && viewItem =~ /azure(Subscription|;DockerV2;Registry;)/",
					"group": "regs_zzz_common@1"
				},
				{
					"command": "vscode-docker.registries.dockerHub.openInBrowser",
					"when": "view == dockerRegistries && viewItem =~ /dockerHub;DockerHubV2;(Tag|Repository|Registry);/",
					"group": "regs_zzz_common@1"
				},
				{
					"command": "vscode-docker.registries.azure.viewProperties",
					"when": "view == dockerRegistries && viewItem =~ /azure(TaskRun|;DockerV2;Registry;)/",
					"group": "regs_zzz_common@2"
				},
				{
					"command": "vscode-docker.registries.refresh",
					"when": "view == dockerRegistries && viewItem == connectedRegistries",
					"group": "regs_zzz_common@9"
				},
				{
					"command": "vscode-docker.registries.refresh",
					"when": "view == dockerRegistries && viewItem =~ /.*;.*;(Repository|Registry|RegistryProvider);/",
					"group": "regs_zzz_common@9"
				},
				{
					"command": "vscode-docker.registries.refresh",
					"when": "view == dockerRegistries && viewItem =~ /azure(Subscription|Tasks|Task|RunsWithoutTask)$/",
					"group": "regs_zzz_common@9"
				},
				{
					"command": "vscode-docker.volumes.inspect",
					"when": "view == dockerVolumes && viewItem == volume",
					"group": "volumes_1_general@1"
				},
				{
					"command": "vscode-docker.volumes.remove",
					"when": "view == dockerVolumes && viewItem == volume",
					"group": "volumes_2_destructive@1"
				}
			]
		},
		"debuggers": [
			{
				"type": "docker",
				"label": "Docker: Debug in Container",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"containerName": {
								"type": "string",
								"description": "Name of the container used for debugging."
							},
							"dockerServerReadyAction": {
								"description": "Options for launching a browser to the Docker container. Similar to serverReadyAction, but replaces container ports with host ports.",
								"properties": {
									"action": {
										"type": "string",
										"description": "The action to take when the pattern is found.",
										"enum": [
											"debugWithChrome",
											"openExternally"
										]
									},
									"containerName": {
										"type": "string",
										"description": "The container name to match the host port."
									},
									"pattern": {
										"type": "string",
										"description": "The regex pattern to look for in Debug console output."
									},
									"uriFormat": {
										"type": "string",
										"description": "The URI format to launch.",
										"default": "http://localhost:%s"
									},
									"webRoot": {
										"type": "string",
										"description": "The root folder from which web pages are served."
									}
								}
							},
							"removeContainerAfterDebug": {
								"type": "boolean",
								"description": "Whether to remove the debug container after debugging.",
								"default": true
							},
							"platform": {
								"type": "string",
								"description": "The target plaform for the application.",
								"enum": [
									"netCore",
									"node"
								]
							},
							"netCore": {
								"description": "Options for debugging .NET Core projects in Docker.",
								"properties": {
									"appProject": {
										"type": "string",
										"description": "The .NET Core project (.csproj, .fsproj, etc.) to debug."
									}
								},
								"required": [
									"appProject"
								]
							},
							"node": {
								"description": "Options for debugging Node.js projects in Docker.",
								"properties": {
									"port": {
										"type": "integer",
										"description": "The debug port to use."
									},
									"address": {
										"type": "string",
										"description": "TCP/IP address of the debug port."
									},
									"sourceMaps": {
										"type": "boolean",
										"description": "Enable source maps by setting this to `true`."
									},
									"outFiles": {
										"type": "array",
										"description": "Array of glob patterns for locating generated JavaScript files.",
										"items": {
											"type": "string"
										}
									},
									"autoAttachChildProcesses": {
										"type": "boolean",
										"description": "Track all subprocesses of debuggee and automatically attach to those that are launched in debug mode."
									},
									"timeout": {
										"type": "integer",
										"description": "When restarting a session, give up after this number of milliseconds."
									},
									"stopOnEntry": {
										"type": "boolean",
										"description": "Break immediately when the program launches."
									},
									"localRoot": {
										"type": "string",
										"description": "VS Code's root directory."
									},
									"remoteRoot": {
										"type": "string",
										"description": "Node's root directory within the Docker container."
									},
									"smartStep": {
										"type": "boolean",
										"description": "Try to automatically step over code that doesn't map to source files."
									},
									"skipFiles": {
										"type": "array",
										"description": "Automatically skip files covered by these glob patterns.",
										"items": {
											"type": "string"
										}
									},
									"trace": {
										"type": [
											"boolean",
											"string"
										],
										"description": "Enable diagnostic output.",
										"enum": [
											"verbose",
											true
										]
									}
								}
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Docker: Attach to Node",
						"description": "Docker: Attach to Node",
						"body": {
							"type": "node",
							"request": "attach",
							"name": "Docker: Attach to Node",
							"remoteRoot": "/usr/src/app"
						}
					}
				]
			},
			{
				"type": "docker-coreclr",
				"label": "Docker: Launch .NET Core (Deprecated)",
				"configurationSnippets": [],
				"configurationAttributes": {
					"launch": {
						"properties": {
							"appFolder": {
								"type": "string",
								"description": "Path to the folder for the application."
							},
							"appOutput": {
								"type": "string",
								"description": "Path to the output assembly for the application."
							},
							"appProject": {
								"type": "string",
								"description": "Path to the application project file."
							},
							"dockerBuild": {
								"description": "Options for building the Docker image used for debugging.",
								"properties": {
									"args": {
										"type": "object",
										"description": "Build arguments applied to the Docker image used for debugging.",
										"additionalProperties": {
											"type": "string"
										}
									},
									"context": {
										"type": "string",
										"description": "Path to the Docker build context."
									},
									"dockerfile": {
										"type": "string",
										"description": "Path to the Dockerfile used for the build."
									},
									"labels": {
										"type": "object",
										"description": "Labels applied to the Docker image used for debugging.",
										"additionalProperties": {
											"type": "string"
										}
									},
									"tag": {
										"type": "string",
										"description": "Tag applied to the Docker image used for debugging."
									},
									"target": {
										"type": "string",
										"description": "Docker build target (stage) used for debugging."
									}
								}
							},
							"dockerRun": {
								"description": "Options for running the Docker container used for debugging.",
								"properties": {
									"containerName": {
										"type": "string",
										"description": "Name of the container used for debugging."
									},
									"env": {
										"type": "object",
										"description": "Environment variables applied to the Docker container used for debugging.",
										"additionalProperties": {
											"type": "string"
										}
									},
									"envFiles": {
										"type": "array",
										"description": "Files of environment variables read in and applied to the Docker container used for debugging.",
										"items": {
											"type": "string"
										}
									},
									"labels": {
										"type": "object",
										"description": "Labels applied to the Docker container used for debugging.",
										"additionalProperties": {
											"type": "string"
										}
									},
									"network": {
										"type": "string",
										"description": "The network to which the container will be connected."
									},
									"networkAlias": {
										"type": "string",
										"description": "The network-scoped alias to assign to the container."
									},
									"ports": {
										"type": "array",
										"description": "Ports that are going to be mapped on the host.",
										"items": {
											"type": "object",
											"properties": {
												"hostPort": {
													"type": "string",
													"description": "Port number to be bound on the host."
												},
												"containerPort": {
													"type": "string",
													"description": "Port number of the container to be bound."
												},
												"protocol": {
													"type": "string",
													"description": "Specific protocol for the binding (`tcp | udp`).",
													"enum": [
														"tcp",
														"udp"
													]
												},
												"required": [
													"containerPort"
												]
											}
										}
									},
									"extraHosts": {
										"type": "array",
										"description": "Hosts to be added to the container's `hosts` file for DNS resolution.",
										"items": {
											"type": "object",
											"properties": {
												"hostname": {
													"type": "string",
													"description": "Hostname for dns resolution."
												},
												"ip": {
													"type": "string",
													"description": "IP associated to the hostname."
												}
											},
											"required": [
												"hostname",
												"ip"
											]
										}
									},
									"volumes": {
										"type": "array",
										"description": "Volumes that are going to be mapped to the container.",
										"items": {
											"type": "object",
											"properties": {
												"localPath": {
													"type": "string",
													"description": "Path on local machine that will be mapped. The folder will be created if it does not exist."
												},
												"containerPath": {
													"type": "string",
													"description": "Path where the volume will be mapped within the container. The folder will be created if it does not exist."
												},
												"permissions": {
													"type": "string",
													"description": "Permissions for the container for the mapped volume, `rw` for read-write or `ro` for read-only.",
													"enum": [
														"rw",
														"ro"
													]
												}
											},
											"required": [
												"localPath",
												"containerPath"
											]
										}
									}
								}
							},
							"configureAspNetCoreSsl": {
								"type": "boolean",
								"default": true,
								"description": "Whether to configure certificate and other settings to enable SSL on ASP.NET Core web services."
							}
						}
					}
				}
			}
		],
		"taskDefinitions": [
			{
				"type": "docker-build",
				"properties": {
					"dockerBuild": {
						"description": "Options for building the Docker image used for debugging.",
						"properties": {
							"buildArgs": {
								"type": "object",
								"description": "Build arguments applied to the Docker image used for debugging.",
								"additionalProperties": {
									"type": "string"
								}
							},
							"context": {
								"type": "string",
								"description": "Path to the Docker build context."
							},
							"dockerfile": {
								"type": "string",
								"description": "Path to the Dockerfile used for the build."
							},
							"labels": {
								"type": "object",
								"description": "Labels applied to the Docker image used for debugging.",
								"properties": {
									"includeDefaults": {
										"type": "boolean",
										"description": "Whether to include the default set of labels defined by the Docker extension",
										"default": true
									}
								},
								"additionalProperties": {
									"type": "string"
								}
							},
							"tag": {
								"type": "string",
								"description": "Tag applied to the Docker image used for debugging."
							},
							"target": {
								"type": "string",
								"description": "Docker build target (stage) used for debugging."
							},
							"pull": {
								"type": "boolean",
								"description": "Whether or not to pull new base images before building."
							}
						}
					},
					"platform": {
						"type": "string",
						"description": "The target plaform for the application.",
						"enum": [
							"netCore",
							"node"
						]
					},
					"netCore": {
						"description": "Options for building .NET Core projects in Docker.",
						"properties": {
							"appProject": {
								"type": "string",
								"description": "The .NET Core project (.csproj, .fsproj, etc.) to build."
							}
						},
						"required": [
							"appProject"
						]
					},
					"node": {
						"description": "Options for building Node.js applications in Docker.",
						"properties": {
							"package": {
								"type": "string",
								"description": "The path to the package.json for the application."
							}
						}
					}
				}
			},
			{
				"type": "docker-run",
				"properties": {
					"dockerRun": {
						"description": "Options for running the Docker container used for debugging.",
						"properties": {
							"command": {
								"type": "string",
								"description": "The command to run upon starting the container."
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container used for debugging."
							},
							"env": {
								"type": "object",
								"description": "Environment variables applied to the Docker container used for debugging.",
								"additionalProperties": {
									"type": "string"
								}
							},
							"envFiles": {
								"type": "array",
								"description": "Files of environment variables read in and applied to the Docker container used for debugging.",
								"items": {
									"type": "string"
								}
							},
							"image": {
								"type": "string",
								"description": "The image to run."
							},
							"labels": {
								"type": "object",
								"description": "Labels applied to the Docker container used for debugging.",
								"properties": {
									"includeDefaults": {
										"type": "boolean",
										"description": "Whether to include the default set of labels defined by the Docker extension",
										"default": true
									}
								},
								"additionalProperties": {
									"type": "string"
								}
							},
							"network": {
								"type": "string",
								"description": "The network to which the container will be connected."
							},
							"networkAlias": {
								"type": "string",
								"description": "The network-scoped alias to assign to the container."
							},
							"os": {
								"type": "string",
								"description": "The container operating system.",
								"default": "Linux",
								"enum": [
									"Linux",
									"Windows"
								]
							},
							"ports": {
								"type": "array",
								"description": "Ports that are going to be mapped on the host.",
								"items": {
									"type": "object",
									"properties": {
										"hostPort": {
											"type": "integer",
											"description": "Port number to be bound on the host."
										},
										"containerPort": {
											"type": "integer",
											"description": "Port number of the container to be bound."
										},
										"protocol": {
											"type": "string",
											"description": "Specific protocol for the binding (`tcp | udp`).",
											"enum": [
												"tcp",
												"udp"
											]
										}
									},
									"required": [
										"containerPort"
									]
								}
							},
							"portsPublishAll": {
								"type": "boolean",
								"description": "Whether to publish all exposed container ports to random ports on the host.",
								"default": true
							},
							"extraHosts": {
								"type": "array",
								"description": "Hosts to be added to the container's `hosts` file for DNS resolution.",
								"items": {
									"type": "object",
									"properties": {
										"hostname": {
											"type": "string",
											"description": "Hostname for dns resolution."
										},
										"ip": {
											"type": "string",
											"description": "IP associated to the hostname."
										}
									},
									"required": [
										"hostname",
										"ip"
									]
								}
							},
							"volumes": {
								"type": "array",
								"description": "Volumes that are going to be mapped to the container.",
								"items": {
									"type": "object",
									"properties": {
										"localPath": {
											"type": "string",
											"description": "Path on local machine that will be mapped. The folder will be created if it does not exist."
										},
										"containerPath": {
											"type": "string",
											"description": "Path where the volume will be mapped within the container. The folder will be created if it does not exist."
										},
										"permissions": {
											"type": "string",
											"description": "Permissions for the container for the mapped volume, `rw` for read-write or `ro` for read-only.",
											"enum": [
												"rw",
												"ro"
											]
										}
									},
									"required": [
										"localPath",
										"containerPath"
									]
								}
							}
						}
					},
					"platform": {
						"type": "string",
						"description": "The target plaform for the application.",
						"enum": [
							"netCore",
							"node"
						]
					},
					"netCore": {
						"description": "Options for running .NET Core projects in Docker.",
						"properties": {
							"appProject": {
								"type": "string",
								"description": "The .NET Core project (.csproj, .fsproj, etc.) to build."
							},
							"enableDebugging": {
								"type": "boolean",
								"description": "Whether to enable debugging within the container."
							},
							"configureSsl": {
								"type": "boolean",
								"description": "Whether to configure certificate and other settings to enable SSL on ASP.NET Core web services."
							}
						},
						"required": [
							"appProject"
						]
					},
					"node": {
						"description": "Options for running Node.js applications in Docker.",
						"properties": {
							"enableDebugging": {
								"type": "boolean",
								"description": "Whether to enable debugging within the container."
							},
							"inspectMode": {
								"type": "string",
								"description": "Whether debugging should break immediately upon application start."
							},
							"inspectPort": {
								"type": "integer",
								"description": "The port on which debugging should occur."
							},
							"package": {
								"type": "string",
								"description": "The path to the package.json for the application."
							}
						}
					}
				}
			}
		],
		"languages": [
			{
				"id": "dockerfile",
				"aliases": [
					"Dockerfile"
				],
				"filenamePatterns": [
					"*.dockerfile",
					"Dockerfile",
					"Dockerfile.debug",
					"Dockerfile.dev",
					"Dockerfile.develop",
					"Dockerfile.prod"
				]
			},
			{
				"id": "ignore",
				"filenames": [
					".dockerignore"
				]
			}
		],
		"configuration": {
			"title": "Docker",
			"properties": {
				"docker.defaultRegistryPath": {
					"type": "string",
					"default": "",
					"description": "Default registry and path when tagging an image"
				},
				"docker.explorerRefreshInterval": {
					"type": "number",
					"default": 2000,
					"description": "Explorer refresh interval, default is 2000ms"
				},
				"docker.containers.groupBy": {
					"type": "string",
					"default": "None",
					"description": "The property to use when grouping containers.",
					"enum": [
						"ContainerId",
						"ContainerName",
						"CreatedTime",
						"FullTag",
						"ImageId",
						"Networks",
						"None",
						"Ports",
						"Registry",
						"Repository",
						"RepositoryName",
						"RepositoryNameAndTag",
						"State",
						"Status",
						"Tag"
					]
				},
				"docker.containers.description": {
					"type": "array",
					"default": [
						"ContainerName",
						"Status"
					],
					"description": "Any secondary properties to display for a container.",
					"items": {
						"type": "string",
						"enum": [
							"ContainerId",
							"ContainerName",
							"CreatedTime",
							"FullTag",
							"ImageId",
							"Networks",
							"Ports",
							"Registry",
							"Repository",
							"RepositoryName",
							"RepositoryNameAndTag",
							"State",
							"Status",
							"Tag"
						]
					}
				},
				"docker.containers.label": {
					"type": "string",
					"default": "FullTag",
					"description": "The primary property to display for a container.",
					"enum": [
						"ContainerId",
						"ContainerName",
						"CreatedTime",
						"FullTag",
						"ImageId",
						"Networks",
						"Ports",
						"Registry",
						"Repository",
						"RepositoryName",
						"RepositoryNameAndTag",
						"State",
						"Status",
						"Tag"
					]
				},
				"docker.containers.sortBy": {
					"type": "string",
					"default": "CreatedTime",
					"description": "The property to use when sorting containers.",
					"enum": [
						"CreatedTime",
						"Label"
					]
				},
				"docker.images.groupBy": {
					"type": "string",
					"default": "Repository",
					"description": "The property to use when grouping images.",
					"enum": [
						"CreatedTime",
						"FullTag",
						"ImageId",
						"None",
						"Registry",
						"Repository",
						"RepositoryName",
						"RepositoryNameAndTag",
						"Tag"
					]
				},
				"docker.images.description": {
					"type": "array",
					"default": [
						"CreatedTime"
					],
					"description": "Any secondary properties to display for a image.",
					"items": {
						"type": "string",
						"enum": [
							"CreatedTime",
							"FullTag",
							"ImageId",
							"Registry",
							"Repository",
							"RepositoryName",
							"RepositoryNameAndTag",
							"Tag"
						]
					}
				},
				"docker.images.label": {
					"type": "string",
					"default": "Tag",
					"description": "The primary property to display for a image.",
					"enum": [
						"CreatedTime",
						"FullTag",
						"ImageId",
						"Registry",
						"Repository",
						"RepositoryName",
						"RepositoryNameAndTag",
						"Tag"
					]
				},
				"docker.images.sortBy": {
					"type": "string",
					"default": "CreatedTime",
					"description": "The property to use when sorting images.",
					"enum": [
						"CreatedTime",
						"Label"
					]
				},
				"docker.networks.groupBy": {
					"type": "string",
					"default": "None",
					"description": "The property to use when grouping networks.",
					"enum": [
						"CreatedTime",
						"NetworkDriver",
						"NetworkId",
						"NetworkName",
						"None"
					]
				},
				"docker.networks.description": {
					"type": "array",
					"default": [
						"NetworkDriver",
						"CreatedTime"
					],
					"description": "Any secondary properties to display for a network.",
					"items": {
						"type": "string",
						"enum": [
							"CreatedTime",
							"NetworkDriver",
							"NetworkId",
							"NetworkName"
						]
					}
				},
				"docker.networks.label": {
					"type": "string",
					"default": "NetworkName",
					"description": "The primary property to display for a network.",
					"enum": [
						"CreatedTime",
						"NetworkDriver",
						"NetworkId",
						"NetworkName"
					]
				},
				"docker.networks.sortBy": {
					"type": "string",
					"default": "CreatedTime",
					"description": "The property to use when sorting networks.",
					"enum": [
						"CreatedTime",
						"Label"
					]
				},
				"docker.volumes.groupBy": {
					"type": "string",
					"default": "None",
					"description": "The property to use when grouping volumes.",
					"enum": [
						"CreatedTime",
						"VolumeName",
						"None"
					]
				},
				"docker.volumes.description": {
					"type": "array",
					"default": [
						"CreatedTime"
					],
					"description": "Any secondary properties to display for a volume.",
					"items": {
						"type": "string",
						"enum": [
							"CreatedTime",
							"VolumeName"
						]
					}
				},
				"docker.volumes.label": {
					"type": "string",
					"default": "VolumeName",
					"description": "The primary property to display for a volume.",
					"enum": [
						"CreatedTime",
						"VolumeName"
					]
				},
				"docker.volumes.sortBy": {
					"type": "string",
					"default": "CreatedTime",
					"description": "The property to use when sorting volumes.",
					"enum": [
						"CreatedTime",
						"Label"
					]
				},
				"docker.imageBuildContextPath": {
					"type": "string",
					"default": "",
					"description": "Build context PATH to pass to Docker build command"
				},
				"docker.truncateLongRegistryPaths": {
					"type": "boolean",
					"default": false,
					"description": "Truncate long Image and Container registry paths in the Explorer"
				},
				"docker.truncateMaxLength": {
					"type": "number",
					"default": 10,
					"description": "Maximum number of characters for long registry paths in the Explorer, including elipsis"
				},
				"docker.host": {
					"type": "string",
					"default": "",
					"description": "Equivalent to setting the DOCKER_HOST environment variable."
				},
				"docker.certPath": {
					"type": "string",
					"default": "",
					"description": "Equivalent to setting the DOCKER_CERT_PATH environment variable."
				},
				"docker.tlsVerify": {
					"type": "string",
					"default": "",
					"description": "Equivalent to setting the DOCKER_TLS_VERIFY environment variable."
				},
				"docker.machineName": {
					"type": "string",
					"default": "",
					"description": "Equivalent to setting the DOCKER_MACHINE_NAME environment variable."
				},
				"docker.languageserver.diagnostics.deprecatedMaintainer": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for the deprecated MAINTAINER instruction"
				},
				"docker.languageserver.diagnostics.emptyContinuationLine": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines"
				},
				"docker.languageserver.diagnostics.directiveCasing": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for parser directives that are not written in lowercase"
				},
				"docker.languageserver.diagnostics.instructionCasing": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for instructions that are not written in uppercase"
				},
				"docker.languageserver.diagnostics.instructionCmdMultiple": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions"
				},
				"docker.languageserver.diagnostics.instructionEntrypointMultiple": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions"
				},
				"docker.languageserver.diagnostics.instructionHealthcheckMultiple": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions"
				},
				"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes"
				},
				"docker.languageserver.diagnostics.instructionWorkdirRelative": {
					"scope": "resource",
					"type": "string",
					"default": "warning",
					"enum": [
						"ignore",
						"warning",
						"error"
					],
					"description": "Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path"
				},
				"docker.attachShellCommand.linuxContainer": {
					"type": "string",
					"default": "/bin/sh -c \"[ -e /bin/bash ] && /bin/bash || /bin/sh\"",
					"description": "Attach command to use for Linux containers"
				},
				"docker.attachShellCommand.windowsContainer": {
					"type": "string",
					"default": "powershell",
					"description": "Attach command to use for Windows containers"
				},
				"docker.dockerComposeBuild": {
					"type": "boolean",
					"default": true,
					"description": "Run docker-compose with the --build argument, defaults to true"
				},
				"docker.dockerComposeDetached": {
					"type": "boolean",
					"default": true,
					"description": "Run docker-compose with the --d (detached) argument, defaults to true"
				},
				"docker.showRemoteWorkspaceWarning": {
					"type": "boolean",
					"default": true,
					"description": "Show a prompt to switch from \"UI\" extension to \"Workspace\" extension if an operation is not supported."
				}
			}
		},
		"configurationDefaults": {
			"[yaml]": {
				"editor.quickSuggestions": {
					"other": true,
					"comments": false,
					"strings": true
				}
			}
		},
		"commands": [
			{
				"command": "vscode-docker.api.configure",
				"title": "Add Docker Files to Workspace (API)...",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.compose.down",
				"title": "Compose Down",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.compose.restart",
				"title": "Compose Restart",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.compose.up",
				"title": "Compose Up",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.configure",
				"title": "Add Docker Files to Workspace...",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.containers.attachShell",
				"title": "Attach Shell",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.browse",
				"title": "Open in Browser",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.configureExplorer",
				"title": "Configure Explorer...",
				"category": "Docker Containers",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "vscode-docker.containers.inspect",
				"title": "Inspect",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.prune",
				"title": "Prune...",
				"category": "Docker Containers",
				"icon": {
					"light": "resources/light/prune.svg",
					"dark": "resources/dark/prune.svg"
				}
			},
			{
				"command": "vscode-docker.containers.refresh",
				"title": "Refresh",
				"category": "Docker Containers",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "vscode-docker.containers.remove",
				"title": "Remove...",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.restart",
				"title": "Restart",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.select",
				"title": "Select container",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.start",
				"title": "Start",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.stop",
				"title": "Stop",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.containers.viewLogs",
				"title": "View Logs",
				"category": "Docker Containers"
			},
			{
				"command": "vscode-docker.debugging.initializeForDebugging",
				"title": "Initialize for Docker debugging",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.images.build",
				"title": "Build Image...",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.configureExplorer",
				"title": "Configure Explorer...",
				"category": "Docker Images",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "vscode-docker.images.inspect",
				"title": "Inspect",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.prune",
				"title": "Prune...",
				"category": "Docker Images",
				"icon": {
					"light": "resources/light/prune.svg",
					"dark": "resources/dark/prune.svg"
				}
			},
			{
				"command": "vscode-docker.images.push",
				"title": "Push",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.refresh",
				"title": "Refresh",
				"category": "Docker Images",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "vscode-docker.images.remove",
				"title": "Remove...",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.run",
				"title": "Run",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.runAzureCli",
				"title": "Run Azure CLI",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.runInteractive",
				"title": "Run Interactive",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.images.tag",
				"title": "Tag...",
				"category": "Docker Images"
			},
			{
				"command": "vscode-docker.networks.configureExplorer",
				"title": "Configure Explorer...",
				"category": "Docker Networks",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "vscode-docker.networks.create",
				"title": "Create...",
				"category": "Docker Networks",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "vscode-docker.networks.inspect",
				"title": "Inspect",
				"category": "Docker Networks"
			},
			{
				"command": "vscode-docker.networks.prune",
				"title": "Prune...",
				"category": "Docker Networks",
				"icon": {
					"light": "resources/light/prune.svg",
					"dark": "resources/dark/prune.svg"
				}
			},
			{
				"command": "vscode-docker.networks.refresh",
				"title": "Refresh",
				"category": "Docker Networks",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "vscode-docker.networks.remove",
				"title": "Remove...",
				"category": "Docker Networks"
			},
			{
				"command": "vscode-docker.pruneSystem",
				"title": "Prune System...",
				"category": "Docker"
			},
			{
				"command": "vscode-docker.registries.azure.buildImage",
				"title": "Build Image in Azure...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.createRegistry",
				"title": "Create Registry...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.deleteRegistry",
				"title": "Delete Registry...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.deleteRepository",
				"title": "Delete Repository...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.openInPortal",
				"title": "Open in Portal",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.runFileAsTask",
				"title": "Run as Task in Azure...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.runTask",
				"title": "Run Task",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.selectSubscriptions",
				"title": "Select Subscriptions...",
				"icon": {
					"light": "resources/light/filter.svg",
					"dark": "resources/dark/filter.svg"
				}
			},
			{
				"command": "vscode-docker.registries.azure.untagImage",
				"title": "Untag Image...",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.viewProperties",
				"title": "View Properties",
				"category": "Azure Container Registry"
			},
			{
				"command": "vscode-docker.registries.azure.viewTaskLogs",
				"title": "View Logs",
				"category": "Azure Container Registry",
				"icon": {
					"light": "resources/light/viewLogs.svg",
					"dark": "resources/dark/viewLogs.svg"
				}
			},
			{
				"command": "vscode-docker.registries.connectRegistry",
				"title": "Connect Registry...",
				"category": "Docker Registries",
				"icon": {
					"light": "resources/light/connect.svg",
					"dark": "resources/dark/connect.svg"
				}
			},
			{
				"command": "vscode-docker.registries.copyImageDigest",
				"title": "Copy Image Digest",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.deleteImage",
				"title": "Delete Image...",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.deployImageToAzure",
				"title": "Deploy Image to Azure App Service...",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.disconnectRegistry",
				"title": "Disconnect",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.dockerHub.openInBrowser",
				"title": "Open in Browser",
				"category": "Docker Hub"
			},
			{
				"command": "vscode-docker.registries.logInToDockerCli",
				"title": "Log In to Docker CLI",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.logOutOfDockerCli",
				"title": "Log Out of Docker CLI",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.pullImage",
				"title": "Pull Image",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.pullRepository",
				"title": "Pull Repository",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.registries.refresh",
				"title": "Refresh",
				"category": "Docker Registries",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "vscode-docker.registries.setAsDefault",
				"title": "Set as Default",
				"category": "Docker Registries"
			},
			{
				"command": "vscode-docker.volumes.configureExplorer",
				"title": "Configure Explorer...",
				"category": "Docker Volumes",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "vscode-docker.volumes.inspect",
				"title": "Inspect",
				"category": "Docker Volumes"
			},
			{
				"command": "vscode-docker.volumes.prune",
				"title": "Prune...",
				"category": "Docker Volumes",
				"icon": {
					"light": "resources/light/prune.svg",
					"dark": "resources/dark/prune.svg"
				}
			},
			{
				"command": "vscode-docker.volumes.refresh",
				"title": "Refresh",
				"category": "Docker Volumes",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "vscode-docker.volumes.remove",
				"title": "Remove...",
				"category": "Docker Volumes"
			}
		],
		"views": {
			"dockerView": [
				{
					"id": "dockerContainers",
					"name": "Containers"
				},
				{
					"id": "dockerImages",
					"name": "Images"
				},
				{
					"id": "dockerRegistries",
					"name": "Registries"
				},
				{
					"id": "dockerNetworks",
					"name": "Networks"
				},
				{
					"id": "dockerVolumes",
					"name": "Volumes"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"icon": "resources/docker.svg",
					"id": "dockerView",
					"title": "Docker"
				}
			]
		}
	},
	"engines": {
		"vscode": "^1.40.0"
	},
	"scripts": {
		"vscode:prepublish": "npm run webpack-prod",
		"build": "tsc -p ./",
		"compile": "tsc -watch -p ./",
		"package": "vsce package",
		"lint": "tslint --project tsconfig.json -t verbose",
		"lint-fix": "tslint --project tsconfig.json -t verbose --fix",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"pretest": "npm run build && npm run webpack",
		"test": "gulp test",
		"all": "npm i && npm run lint && npm test",
		"webpack": "gulp webpack-dev",
		"webpack-prod": "gulp webpack-prod",
		"webpack-profile": "webpack --profile --json --mode production > webpack-stats.json && echo Use http://webpack.github.io/analyse to analyze the stats"
	},
	"extensionDependencies": [
		"vscode.docker",
		"vscode.yaml"
	],
	"devDependencies": {
		"@types/adm-zip": "^0.4.32",
		"@types/deep-equal": "^1.0.1",
		"@types/dockerode": "^2.5.20",
		"@types/fs-extra": "^5.1.0",
		"@types/glob": "5.0.35",
		"@types/keytar": "^4.4.0",
		"@types/mocha": "^5.2.7",
		"@types/node": "^11.13.20",
		"@types/request-promise-native": "^1.0.16",
		"@types/semver": "^5.5.0",
		"@types/string-replace-webpack-plugin": "^0.1.0",
		"@types/xml2js": "^0.4.5",
		"adm-zip": "^0.4.11",
		"copy-webpack-plugin": "^4.5.4",
		"gulp": "^4.0.2",
		"mocha": "^5.2.0",
		"mocha-junit-reporter": "^1.23.1",
		"mocha-multi-reporters": "^1.1.7",
		"string-replace-webpack-plugin": "^0.1.3",
		"ts-node": "^7.0.1",
		"tslint": "^5.20.0",
		"tslint-microsoft-contrib": "^6.2.0",
		"typescript": "^3.6.3",
		"umd-compat-loader": "^2.1.2",
		"vsce": "^1.66.0",
		"vscode": "^1.1.36",
		"vscode-azureextensiondev": "^0.2.3",
		"webpack": "^4.40.2",
		"webpack-cli": "^3.3.8"
	},
	"dependencies": {
		"adal-node": "^0.1.28",
		"azure-arm-containerregistry": "^3.0.0",
		"azure-arm-website": "^5.3.0",
		"azure-storage": "^2.10.3",
		"deep-equal": "^1.1.0",
		"dockerfile-language-server-nodejs": "^0.0.21",
		"docker-modem": "^2.0.4",
		"dockerode": "^3.0.2",
		"fs-extra": "^6.0.1",
		"glob": "7.1.2",
		"gradle-to-js": "^2.0.0",
		"moment": "^2.24.0",
		"ms-rest": "^2.5.3",
		"ms-rest-azure": "^2.6.0",
		"request": "^2.88.0",
		"request-promise-native": "^1.0.7",
		"semver": "^6.3.0",
		"tar": "^4.4.10",
		"vscode-azureappservice": "^0.44.3",
		"vscode-azureextensionui": "^0.27.1",
		"vscode-languageclient": "^5.2.1",
		"xml2js": "^0.4.22"
	},
	"__metadata": {
		"id": "0479fc1c-3d67-49f9-b087-fb9069afe48f",
		"publisherId": "52b787f2-79a9-4f32-99b4-393afe3005d3",
		"publisherDisplayName": "Microsoft"
	}
}